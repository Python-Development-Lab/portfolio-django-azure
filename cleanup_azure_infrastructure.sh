
#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ Azure –¥–ª—è Django –¥–æ–¥–∞—Ç–∫—É
# =============================================================================

set -e  # –ó—É–ø–∏–Ω–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# =============================================================================
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ß–ò–©–ï–ù–ù–Ø –†–ï–°–£–†–°–Ü–í
# =============================================================================

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è cleanup —Å–∫—Ä–∏–ø—Ç—É
create_cleanup_script() {
    local CLEANUP_SCRIPT="cleanup_azure_infrastructure.sh"
    
    log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è cleanup —Å–∫—Ä–∏–ø—Ç—É: ${CLEANUP_SCRIPT}"
    
    cat > "$CLEANUP_SCRIPT" << EOF
#!/bin/bash
# =============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ Azure Django –¥–æ–¥–∞—Ç–∫—É
# =============================================================================

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "\${GREEN}[\$(date +'%Y-%m-%d %H:%M:%S')]\${NC} \$1"
}

error() {
    echo -e "\${RED}[ERROR]\${NC} \$1"
    exit 1
}

warning() {
    echo -e "\${YELLOW}[WARNING]\${NC} \$1"
}

# –†–µ—Å—É—Ä—Å–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
RESOURCE_GROUP_NAME="${RESOURCE_GROUP_NAME}"
WEB_APP_NAME="${WEB_APP_NAME}"
APP_SERVICE_PLAN_NAME="${APP_SERVICE_PLAN_NAME}"
DATABASE_SERVER_NAME="${DATABASE_SERVER_NAME}"
STORAGE_ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}"
KEY_VAULT_NAME="${KEY_VAULT_NAME}"
APP_INSIGHTS_NAME="${APP_INSIGHTS_NAME}"
SUBSCRIPTION_ID="${SUBSCRIPTION_ID}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
confirm_deletion() {
    echo ""
    echo -e "\${RED}‚ö†Ô∏è  –£–í–ê–ì–ê: –í–ò –ó–ë–ò–†–ê–Ñ–¢–ï–°–Ø –í–ò–î–ê–õ–ò–¢–ò –ù–ê–°–¢–£–ü–ù–Ü –†–ï–°–£–†–°–ò:\${NC}"
    echo "=========================================="
    echo "üåç Resource Group: \$RESOURCE_GROUP_NAME"
    echo "üöÄ Web App: \$WEB_APP_NAME"
    echo "üìä App Service Plan: \$APP_SERVICE_PLAN_NAME"
    echo "üóÑÔ∏è  PostgreSQL Server: \$DATABASE_SERVER_NAME"
    echo "üíæ Storage Account: \$STORAGE_ACCOUNT_NAME"
    echo "üîê Key Vault: \$KEY_VAULT_NAME"
    echo "üìà Application Insights: \$APP_INSIGHTS_NAME"
    echo "=========================================="
    echo ""
    
    read -p "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü —Ü—ñ —Ä–µ—Å—É—Ä—Å–∏? (yes/no): " confirmation
    
    if [[ "\$confirmation" != "yes" ]]; then
        echo "–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."
        exit 0
    fi
    
    echo ""
    read -p "–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞! –í–≤–µ–¥—ñ—Ç—å 'DELETE' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: " final_confirmation
    
    if [[ "\$final_confirmation" != "DELETE" ]]; then
        echo "–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –†–µ—Å—É—Ä—Å–∏ –ù–ï –≤–∏–¥–∞–ª–µ–Ω—ñ."
        exit 0
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Key Vault
safe_delete_keyvault() {
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è Key Vault: \$KEY_VAULT_NAME"
    
    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ Key Vault
    if az keyvault delete --name "\$KEY_VAULT_NAME" --resource-group "\$RESOURCE_GROUP_NAME" 2>/dev/null; then
        log "‚úÖ Key Vault –≤–∏–¥–∞–ª–µ–Ω–æ"
        
        # –ü–æ—Ç—ñ–º –æ—á–∏—â—É—î–º–æ –∑ soft delete
        log "–û—á–∏—â–µ–Ω–Ω—è Key Vault –∑ soft delete..."
        if az keyvault purge --name "\$KEY_VAULT_NAME" --location "West Europe" 2>/dev/null; then
            log "‚úÖ Key Vault –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ"
        else
            warning "Key Vault –ø–æ–º—ñ—á–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –∞–ª–µ –º–æ–∂–µ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤ soft delete —Å—Ç–∞–Ω—ñ"
        fi
    else
        warning "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ Key Vault –∞–±–æ –≤—ñ–Ω –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ (—è–∫—â–æ Resource Group –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é—î)
delete_individual_resources() {
    warning "–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    
    # 1. –í–∏–¥–∞–ª–µ–Ω–Ω—è Web App
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è Web App: \$WEB_APP_NAME"
    az webapp delete --name "\$WEB_APP_NAME" --resource-group "\$RESOURCE_GROUP_NAME" --keep-empty-plan || warning "Web App –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    # 2. –í–∏–¥–∞–ª–µ–Ω–Ω—è App Service Plan
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è App Service Plan: \$APP_SERVICE_PLAN_NAME"
    az appservice plan delete --name "\$APP_SERVICE_PLAN_NAME" --resource-group "\$RESOURCE_GROUP_NAME" --yes || warning "App Service Plan –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    # 3. –í–∏–¥–∞–ª–µ–Ω–Ω—è PostgreSQL —Å–µ—Ä–≤–µ—Ä–∞
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è PostgreSQL —Å–µ—Ä–≤–µ—Ä–∞: \$DATABASE_SERVER_NAME"
    az postgres flexible-server delete --name "\$DATABASE_SERVER_NAME" --resource-group "\$RESOURCE_GROUP_NAME" --yes || warning "PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    # 4. –í–∏–¥–∞–ª–µ–Ω–Ω—è Storage Account
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è Storage Account: \$STORAGE_ACCOUNT_NAME"
    az storage account delete --name "\$STORAGE_ACCOUNT_NAME" --resource-group "\$RESOURCE_GROUP_NAME" --yes || warning "Storage Account –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    # 5. –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Key Vault
    safe_delete_keyvault
    
    # 6. –í–∏–¥–∞–ª–µ–Ω–Ω—è Application Insights
    log "–í–∏–¥–∞–ª–µ–Ω–Ω—è Application Insights: \$APP_INSIGHTS_NAME"
    az monitor app-insights component delete --app "\$APP_INSIGHTS_NAME" --resource-group "\$RESOURCE_GROUP_NAME" || warning "Application Insights –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
show_current_resources() {
    log "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    
    if az group exists --name "\$RESOURCE_GROUP_NAME"; then
        echo ""
        echo "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏ –≤ –≥—Ä—É–ø—ñ \$RESOURCE_GROUP_NAME:"
        az resource list --resource-group "\$RESOURCE_GROUP_NAME" --output table 2>/dev/null || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å—ñ–≤"
        echo ""
    else
        warning "Resource Group '\$RESOURCE_GROUP_NAME' –Ω–µ —ñ—Å–Ω—É—î"
        exit 0
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ timeout
delete_with_timeout() {
    local timeout=300  # 5 —Ö–≤–∏–ª–∏–Ω
    local command="\$1"
    
    timeout \$timeout bash -c "\$command" || {
        warning "–û–ø–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ timeout (\${timeout}s). –ú–æ–∂–ª–∏–≤–æ, –¥–µ—è–∫—ñ —Ä–µ—Å—É—Ä—Å–∏ –≤—Å–µ —â–µ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è..."
    }
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è
main_cleanup() {
    echo ""
    echo -e "\${BLUE}============================================\${NC}"
    echo -e "\${BLUE}üóëÔ∏è  AZURE INFRASTRUCTURE CLEANUP SCRIPT\${NC}"
    echo -e "\${BLUE}============================================\${NC}"
    echo ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Azure CLI —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if ! command -v az &> /dev/null; then
        error "Azure CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
    
    if ! az account show &> /dev/null; then
        error "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ Azure CLI. –í–∏–∫–æ–Ω–∞–π—Ç–µ 'az login'"
    fi
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏
    show_current_resources
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    confirm_deletion
    
    log "üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è..."
    
    # –°–ø—Ä–æ–±–∞ 1: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª–æ—ó Resource Group (–Ω–∞–π—à–≤–∏–¥—à–∏–π –º–µ—Ç–æ–¥)
    log "–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª–æ—ó Resource Group..."
    if delete_with_timeout "az group delete --name '\$RESOURCE_GROUP_NAME' --yes --no-wait"; then
        log "‚úÖ Resource Group –ø–æ–º—ñ—á–µ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        
        # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        log "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è Resource Group..."
        local attempts=0
        local max_attempts=30
        
        while az group exists --name "\$RESOURCE_GROUP_NAME" && [ \$attempts -lt \$max_attempts ]; do
            echo -n "."
            sleep 10
            attempts=\$((attempts + 1))
        done
        
        if az group exists --name "\$RESOURCE_GROUP_NAME"; then
            warning "Resource Group –≤—Å–µ —â–µ —ñ—Å–Ω—É—î –ø—ñ—Å–ª—è \${max_attempts} —Å–ø—Ä–æ–±. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤..."
            delete_individual_resources
        else
            log "‚úÖ Resource Group —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!"
        fi
    else
        warning "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ Resource Group. –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤..."
        delete_individual_resources
    fi
    
    # –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
    log "–§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞..."
    if az group exists --name "\$RESOURCE_GROUP_NAME"; then
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—è
        echo ""
        echo "‚ö†Ô∏è  –ó–∞–ª–∏—à–∏–ª–∏—Å—è —Ä–µ—Å—É—Ä—Å–∏:"
        az resource list --resource-group "\$RESOURCE_GROUP_NAME" --output table 2>/dev/null || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫"
        
        warning "–î–µ—è–∫—ñ —Ä–µ—Å—É—Ä—Å–∏ –º–æ–∂—É—Ç—å –≤—Å–µ —â–µ –≤–∏–¥–∞–ª—è—Ç–∏—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Azure Portal —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
    else
        log "‚úÖ –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ!"
    fi
    
    # –û—á–∏—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    log "–û—á–∏—â–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
    [ -f "infrastructure-summary.txt" ] && rm -f infrastructure-summary.txt && log "‚úÖ infrastructure-summary.txt –≤–∏–¥–∞–ª–µ–Ω–æ"
    [ -f "requirements.txt" ] && rm -f requirements.txt && log "‚úÖ requirements.txt –≤–∏–¥–∞–ª–µ–Ω–æ"
    [ -f ".env.example" ] && rm -f .env.example && log "‚úÖ .env.example –≤–∏–¥–∞–ª–µ–Ω–æ"
    [ -f "startup.sh" ] && rm -f startup.sh && log "‚úÖ startup.sh –≤–∏–¥–∞–ª–µ–Ω–æ"
    [ -f "web.config" ] && rm -f web.config && log "‚úÖ web.config –≤–∏–¥–∞–ª–µ–Ω–æ"
    
    echo ""
    echo -e "\${GREEN}============================================\${NC}"
    echo -e "\${GREEN}‚úÖ CLEANUP –ó–ê–í–ï–†–®–ï–ù–û!\${NC}"
    echo -e "\${GREEN}============================================\${NC}"
    echo ""
    echo "üìä –ü—ñ–¥—Å—É–º–æ–∫:"
    echo "- –í—Å—ñ Azure —Ä–µ—Å—É—Ä—Å–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ (–∞–±–æ –ø–æ–º—ñ—á–µ–Ω—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è)"
    echo "- –õ–æ–∫–∞–ª—å–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏ –æ—á–∏—â–µ–Ω—ñ"
    echo "- Key Vault –æ—á–∏—â–µ–Ω–∏–π –∑ soft delete"
    echo ""
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
    echo "- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Azure Portal —á–µ—Ä–µ–∑ 5-10 —Ö–≤–∏–ª–∏–Ω"
    echo "- –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ billing –ø—Ä–∏–ø–∏–Ω–µ–Ω–æ"
    echo "- –í–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π cleanup —Å–∫—Ä–∏–ø—Ç: rm \$0"
    echo ""
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "\$1" in
    --help|-h)
        echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: \$0 [–æ–ø—Ü—ñ—ó]"
        echo ""
        echo "–û–ø—Ü—ñ—ó:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
        echo "  --dry-run      –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        echo "  --force        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–ù–ï–ë–ï–ó–ü–ï–ß–ù–û!)"
        echo ""
        echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
        echo "  \$0                 # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        echo "  \$0 --dry-run       # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–∞–Ω –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
        echo "  \$0 --force         # –í–∏–¥–∞–ª–∏—Ç–∏ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
        exit 0
        ;;
    --dry-run)
        echo "üîç DRY RUN MODE - –ø–æ–∫–∞–∑—É—î–º–æ —â–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:"
        show_current_resources
        echo ""
        echo "–†–µ—Å—É—Ä—Å–∏, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ:"
        echo "- Resource Group: \$RESOURCE_GROUP_NAME"
        echo "- –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –≥—Ä—É–ø–∏"
        echo "- –õ–æ–∫–∞–ª—å–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏"
        echo ""
        echo "–î–ª—è —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å: \$0"
        exit 0
        ;;
    --force)
        log "‚ö†Ô∏è  FORCE MODE - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
        show_current_resources
        log "üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è..."
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ confirm_deletion
        ;;
    "")
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        main_cleanup
        exit 0
        ;;
    *)
        error "–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: \$1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏"
        ;;
esac

# –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏, —Ç–æ —Ü–µ force mode
if delete_with_timeout "az group delete --name '\$RESOURCE_GROUP_NAME' --yes --no-wait"; then
    log "‚úÖ Resource Group –ø–æ–º—ñ—á–µ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è (force mode)"
else
    warning "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤ force mode"
fi

log "‚úÖ Force cleanup –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
EOF

    chmod +x "$CLEANUP_SCRIPT"
    
    echo ""
    echo -e "${GREEN}============================================${NC}"
    echo -e "${GREEN}üìã CLEANUP –°–ö–†–ò–ü–¢ –°–¢–í–û–†–ï–ù–û${NC}"
    echo -e "${GREEN}============================================${NC}"
    echo "üìÅ –§–∞–π–ª: $CLEANUP_SCRIPT"
    echo ""
    echo "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:"
    echo "  ./$CLEANUP_SCRIPT              # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
    echo "  ./$CLEANUP_SCRIPT --dry-run    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–∞–Ω –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
    echo "  ./$CLEANUP_SCRIPT --force      # –í–∏–¥–∞–ª–∏—Ç–∏ –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
    echo "  ./$CLEANUP_SCRIPT --help       # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –£–í–ê–ì–ê: –¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Æ —Å—Ç–≤–æ—Ä–µ–Ω—É —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É!${NC}"
    echo ""
}

# =============================================================================
# –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø - –ù–ê–õ–ê–®–¢–£–ô–¢–ï –¶–Ü –ó–ú–Ü–ù–ù–Ü
# =============================================================================

# –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
PROJECT_NAME="django-app"
ENVIRONMENT="production"  # production, staging, development
LOCATION="West Europe"
TIMESTAMP=$(date +%s)

# –Ü–º–µ–Ω–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤
RESOURCE_GROUP_NAME="${PROJECT_NAME}-${ENVIRONMENT}-rg"
APP_SERVICE_PLAN_NAME="${PROJECT_NAME}-${ENVIRONMENT}-plan"
WEB_APP_NAME="${PROJECT_NAME}-${ENVIRONMENT}-${TIMESTAMP}"
DATABASE_SERVER_NAME="${PROJECT_NAME}-${ENVIRONMENT}-db-${TIMESTAMP}"
DATABASE_NAME="${PROJECT_NAME}_db"
STORAGE_ACCOUNT_NAME="djapp$(date +%s | tail -c 8)"
KEY_VAULT_NAME="djapp-kv-$(date +%s | tail -c 6)"
APP_INSIGHTS_NAME="${PROJECT_NAME}-${ENVIRONMENT}-insights"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è App Service
APP_SERVICE_SKU="B1"
PYTHON_VERSION="3.11"

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_ADMIN_USER="djangoadmin"
DB_ADMIN_PASSWORD="$(openssl rand -base64 32 | tr -d '=/+' | cut -c1-16)Aa1!"
DB_SKU="Standard_D2ds_v4"

# –¢–µ–≥–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å—ñ–≤
TAGS="Environment=${ENVIRONMENT} Project=${PROJECT_NAME} CreatedBy=AzureCLI"

log "–ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è Django –¥–æ–¥–∞—Ç–∫—É..."
log "–ü—Ä–æ–µ–∫—Ç: ${PROJECT_NAME}"
log "–°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${ENVIRONMENT}"
log "–†–µ–≥—ñ–æ–Ω: ${LOCATION}"

# =============================================================================
# –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô
# =============================================================================

log "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."

if ! command -v az &> /dev/null; then
    error "Azure CLI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –∑ https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
fi

if ! az account show &> /dev/null; then
    error "–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ Azure CLI. –í–∏–∫–æ–Ω–∞–π—Ç–µ 'az login'"
fi

if ! command -v openssl &> /dev/null; then
    error "OpenSSL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
fi

log "‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"

# =============================================================================
# –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–°–£–†–°–Ü–í
# =============================================================================

# 1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Resource Group
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Resource Group: ${RESOURCE_GROUP_NAME}"
az group create \
    --name "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --tags $TAGS

# 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Storage Account –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –º–µ–¥—ñ–∞
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Storage Account: ${STORAGE_ACCOUNT_NAME}"
az storage account create \
    --name "$STORAGE_ACCOUNT_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --sku Standard_LRS \
    --kind StorageV2 \
    --access-tier Hot \
    --tags $TAGS

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –º–µ–¥—ñ–∞
STORAGE_KEY=$(az storage account keys list \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --account-name "$STORAGE_ACCOUNT_NAME" \
    --query '[0].value' \
    --output tsv)

az storage container create \
    --name "static" \
    --account-name "$STORAGE_ACCOUNT_NAME" \
    --account-key "$STORAGE_KEY" \
    --public-access blob

az storage container create \
    --name "media" \
    --account-name "$STORAGE_ACCOUNT_NAME" \
    --account-key "$STORAGE_KEY" \
    --public-access blob

# 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PostgreSQL Database
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PostgreSQL —Å–µ—Ä–≤–µ—Ä–∞: ${DATABASE_SERVER_NAME}"
az postgres flexible-server create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --name "$DATABASE_SERVER_NAME" \
    --location "$LOCATION" \
    --admin-user "$DB_ADMIN_USER" \
    --admin-password "$DB_ADMIN_PASSWORD" \
    --sku-name "$DB_SKU" \
    --storage-size 32 \
    --version 14 \
    --public-access 0.0.0.0 \
    --tags $TAGS

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: ${DATABASE_NAME}"
az postgres flexible-server db create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --server-name "$DATABASE_SERVER_NAME" \
    --database-name "$DATABASE_NAME"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è firewall –ø—Ä–∞–≤–∏–ª
log "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è firewall –ø—Ä–∞–≤–∏–ª –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
az postgres flexible-server firewall-rule create \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --name "$DATABASE_SERVER_NAME" \
    --rule-name "AllowAzureServices" \
    --start-ip-address 0.0.0.0 \
    --end-ip-address 0.0.0.0

# 4. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Key Vault –¥–ª—è —Å–µ–∫—Ä–µ—Ç—ñ–≤
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Key Vault: ${KEY_VAULT_NAME}"
az keyvault create \
    --name "$KEY_VAULT_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --enable-rbac-authorization false \
    --tags $TAGS

# –û—Ç—Ä–∏–º–∞–π—Ç–µ –≤–∞—à User Principal ID
USER_ID=$(az ad signed-in-user show --query id --output tsv)
echo "Your User ID: $USER_ID"

# –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É ID
SUBSCRIPTION_ID=$(az account show --query id --output tsv)
echo "Subscription ID: $SUBSCRIPTION_ID"

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Access Policy –∑–∞–º—ñ—Å—Ç—å RBAC
log "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ Key Vault"
az keyvault set-policy \
    --name "$KEY_VAULT_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --object-id "$(az ad signed-in-user show --query id --output tsv)" \
    --secret-permissions get list set delete

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–µ–∫—Ä–µ—Ç—ñ–≤
log "–î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ –¥–æ Key Vault"
DJANGO_SECRET_KEY=$(openssl rand -base64 50 | tr -d '=/+')

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç—ñ–≤ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–æ–º–∏–ª–æ–∫
if az keyvault secret set \
    --vault-name "$KEY_VAULT_NAME" \
    --name "django-secret-key" \
    --value "$DJANGO_SECRET_KEY" >/dev/null 2>&1; then
    log "‚úÖ Django secret key –¥–æ–¥–∞–Ω–æ"
else
    log "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Django secret key"
fi

if az keyvault secret set \
    --vault-name "$KEY_VAULT_NAME" \
    --name "database-password" \
    --value "$DB_ADMIN_PASSWORD" >/dev/null 2>&1; then
    log "‚úÖ Database password –¥–æ–¥–∞–Ω–æ"
else
    log "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è database password"
fi

if az keyvault secret set \
    --vault-name "$KEY_VAULT_NAME" \
    --name "storage-account-key" \
    --value "$STORAGE_KEY" >/dev/null 2>&1; then
    log "‚úÖ Storage account key –¥–æ–¥–∞–Ω–æ"
else
    log "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è storage account key"
fi

# 5. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application Insights
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Application Insights: ${APP_INSIGHTS_NAME}"
az monitor app-insights component create \
    --app "$APP_INSIGHTS_NAME" \
    --location "$LOCATION" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --tags $TAGS

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è Instrumentation Key
INSTRUMENTATION_KEY=$(az monitor app-insights component show \
    --app "$APP_INSIGHTS_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --query "instrumentationKey" \
    --output tsv)

# 6. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è App Service Plan
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è App Service Plan: ${APP_SERVICE_PLAN_NAME}"
az appservice plan create \
    --name "$APP_SERVICE_PLAN_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --location "$LOCATION" \
    --sku "$APP_SERVICE_SKU" \
    --is-linux \
    --tags $TAGS

# 7. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Web App
log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Web App: ${WEB_APP_NAME}"
az webapp create \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --plan "$APP_SERVICE_PLAN_NAME" \
    --runtime "PYTHON:${PYTHON_VERSION}" \
    --tags $TAGS

# 8. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è Django
log "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
DATABASE_URL="postgresql://${DB_ADMIN_USER}:${DB_ADMIN_PASSWORD}@${DATABASE_SERVER_NAME}.postgres.database.azure.com:5432/${DATABASE_NAME}?sslmode=require"

az webapp config appsettings set \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --settings \
        DJANGO_SETTINGS_MODULE="config.settings.production" \
        SECRET_KEY="@Microsoft.KeyVault(VaultName=${KEY_VAULT_NAME};SecretName=django-secret-key)" \
        DATABASE_URL="$DATABASE_URL" \
        AZURE_STORAGE_ACCOUNT_NAME="$STORAGE_ACCOUNT_NAME" \
        AZURE_STORAGE_ACCOUNT_KEY="@Microsoft.KeyVault(VaultName=${KEY_VAULT_NAME};SecretName=storage-account-key)" \
        AZURE_STORAGE_CONTAINER_STATIC="static" \
        AZURE_STORAGE_CONTAINER_MEDIA="media" \
        APPINSIGHTS_INSTRUMENTATIONKEY="$INSTRUMENTATION_KEY" \
        APPLICATIONINSIGHTS_CONNECTION_STRING="InstrumentationKey=${INSTRUMENTATION_KEY}" \
        DEBUG="False" \
        ALLOWED_HOSTS="${WEB_APP_NAME}.azurewebsites.net" \
        DJANGO_LOG_LEVEL="INFO" \
        PYTHONPATH="/home/site/wwwroot"

# 9. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è App Service –¥–ª—è Django
log "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è App Service –¥–ª—è Django"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è startup –∫–æ–º–∞–Ω–¥–∏
az webapp config set \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --startup-file "gunicorn --bind=0.0.0.0 --timeout 600 config.wsgi"

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
az webapp log config \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --application-logging filesystem \
    --detailed-error-messages true \
    --failed-request-tracing true \
    --web-server-logging filesystem

# 10. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è managed identity –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Key Vault
log "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Managed Identity"
az webapp identity assign \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME"

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è Principal ID
PRINCIPAL_ID=$(az webapp identity show \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --query "principalId" \
    --output tsv)

# –ù–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Key Vault
az keyvault set-policy \
    --name "$KEY_VAULT_NAME" \
    --object-id "$PRINCIPAL_ID" \
    --secret-permissions get list

# 11. –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HTTPS
log "–£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è HTTPS"
az webapp update \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --https-only true

# =============================================================================
# –°–¢–í–û–†–ï–ù–ù–Ø –§–ê–ô–õ–Ü–í –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á
# =============================================================================

log "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è requirements.txt
cat > requirements.txt << 'EOF'
Django>=4.2,<5.0
psycopg2-binary>=2.9.0
gunicorn>=20.1.0
django-storages[azure]>=1.13.0
python-decouple>=3.6
applicationinsights>=0.11.10
opencensus-ext-azure>=1.1.0
opencensus-ext-django>=0.8.0
whitenoise>=6.0.0
Pillow>=9.0.0
celery>=5.2.0
redis>=4.0.0
EOF

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env.example
cat > .env.example << EOF
# Django Settings
SECRET_KEY=your-secret-key-here
DEBUG=False
ALLOWED_HOSTS=${WEB_APP_NAME}.azurewebsites.net

# Database
DATABASE_URL=postgresql://user:password@host:port/database

# Azure Storage
AZURE_STORAGE_ACCOUNT_NAME=${STORAGE_ACCOUNT_NAME}
AZURE_STORAGE_ACCOUNT_KEY=your-storage-key
AZURE_STORAGE_CONTAINER_STATIC=static
AZURE_STORAGE_CONTAINER_MEDIA=media

# Application Insights
APPINSIGHTS_INSTRUMENTATIONKEY=${INSTRUMENTATION_KEY}
EOF

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è startup.sh –¥–ª—è App Service
cat > startup.sh << 'EOF'
#!/bin/bash

echo "Starting Django application..."

# Collect static files
python manage.py collectstatic --noinput

# Run migrations
python manage.py migrate --noinput

# Start Gunicorn
exec gunicorn --bind=0.0.0.0:8000 --timeout 600 --workers 3 config.wsgi:application
EOF

chmod +x startup.sh

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è web.config –¥–ª—è App Service
cat > web.config << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.webServer>
    <handlers>
      <add name="PythonHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified"/>
    </handlers>
    <httpPlatform processPath="python" arguments="manage.py runserver --noreload 0.0.0.0:%HTTP_PLATFORM_PORT%" stdoutLogEnabled="true" stdoutLogFile="python.log" startupTimeLimit="60" processesPerApplication="16">
      <environmentVariables>
        <environmentVariable name="PYTHONPATH" value="%PYTHONPATH%;%{APPL_PHYSICAL_PATH}"/>
      </environmentVariables>
    </httpPlatform>
  </system.webServer>
</configuration>
EOF

# =============================================================================
# –°–¢–í–û–†–ï–ù–ù–Ø CLEANUP –°–ö–†–ò–ü–¢–£
# =============================================================================

# –°—Ç–≤–æ—Ä—é—î–º–æ cleanup —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –ø—ñ–¥—Å—É–º–∫–æ–º
create_cleanup_script

# =============================================================================
# –ü–Ü–î–°–£–ú–û–ö
# =============================================================================

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –¥–æ–¥–∞—Ç–∫—É
APP_URL=$(az webapp show \
    --name "$WEB_APP_NAME" \
    --resource-group "$RESOURCE_GROUP_NAME" \
    --query "defaultHostName" \
    --output tsv)

log "‚úÖ –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!"

echo ""
echo "=========================================="
echo "üìã –ü–Ü–î–°–£–ú–û–ö –°–¢–í–û–†–ï–ù–ò–• –†–ï–°–£–†–°–Ü–í"
echo "=========================================="
echo "üåç Resource Group: $RESOURCE_GROUP_NAME"
echo "üöÄ Web App: $WEB_APP_NAME"
echo "üîó URL: https://$APP_URL"
echo "üìä App Service Plan: $APP_SERVICE_PLAN_NAME ($APP_SERVICE_SKU)"
echo "üóÑÔ∏è  PostgreSQL Server: $DATABASE_SERVER_NAME"
echo "üóÉÔ∏è  Database: $DATABASE_NAME"
echo "üíæ Storage Account: $STORAGE_ACCOUNT_NAME"
echo "üîê Key Vault: $KEY_VAULT_NAME"
echo "üìà Application Insights: $APP_INSIGHTS_NAME"
echo ""
echo "=========================================="
echo "üîë –î–û–°–¢–£–ü–ò (–ó–ë–ï–†–ï–ñ–Ü–¢–¨ –í –ë–ï–ó–ü–ï–ß–ù–û–ú–£ –ú–Ü–°–¶–Ü!)"
echo "=========================================="
echo "Database Admin User: $DB_ADMIN_USER"
echo "Database Admin Password: $DB_ADMIN_PASSWORD"
echo "Django Secret Key: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Key Vault"
echo "Storage Account Key: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Key Vault"
echo ""
echo "=========================================="
echo "üóëÔ∏è  CLEANUP –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø"
echo "=========================================="
echo "üìÅ Cleanup —Å–∫—Ä–∏–ø—Ç: cleanup_azure_infrastructure.sh"
echo ""
echo "üîß –Ø–∫ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—é —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É:"
echo "  ./cleanup_azure_infrastructure.sh              # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
echo "  ./cleanup_azure_infrastructure.sh --dry-run    # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–∞–Ω"
echo "  ./cleanup_azure_infrastructure.sh --force      # –ë–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"
echo "  ./cleanup_azure_infrastructure.sh --help       # –î–æ–≤—ñ–¥–∫–∞"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: Cleanup —Å–∫—Ä–∏–ø—Ç –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Æ —Å—Ç–≤–æ—Ä–µ–Ω—É —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É!${NC}"
echo ""
echo "=========================================="
echo "üìù –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò"
echo "=========================================="
echo "1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –≤–∞—à Django –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Azure"
echo "2. –î–æ–¥–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É"
echo "3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ CI/CD pipeline –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—é"
echo "4. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
echo "5. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ Application Insights"
echo "6. –ó–±–µ—Ä–µ–∂—ñ—Ç—å cleanup —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
echo ""
echo "üöÄ –í–∞—à Django –¥–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ –¥–µ–ø–ª–æ—é!"
echo "=========================================="

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —É —Ñ–∞–π–ª
cat > infrastructure-summary.txt << EOF
Django Azure Infrastructure Summary
===================================
Created: $(date)
Project: $PROJECT_NAME
Environment: $ENVIRONMENT

Resources:
- Resource Group: $RESOURCE_GROUP_NAME
- Web App: $WEB_APP_NAME
- URL: https://$APP_URL
- Database Server: $DATABASE_SERVER_NAME
- Database: $DATABASE_NAME
- Storage Account: $STORAGE_ACCOUNT_NAME
- Key Vault: $KEY_VAULT_NAME
- Application Insights: $APP_INSIGHTS_NAME

Database Credentials:
- Admin User: $DB_ADMIN_USER
- Admin Password: $DB_ADMIN_PASSWORD

Connection String:
$DATABASE_URL

Cleanup:
- Cleanup Script: cleanup_azure_infrastructure.sh
- Command: ./cleanup_azure_infrastructure.sh

Important Notes:
- All secrets stored in Key Vault: $KEY_VAULT_NAME
- HTTPS-only enabled
- Managed Identity configured
- Application Insights monitoring enabled

Files Created:
- requirements.txt
- .env.example
- startup.sh
- web.config
- cleanup_azure_infrastructure.sh
- infrastructure-summary.txt (this file)
EOF

log "üìÑ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª: infrastructure-summary.txt"

# =============================================================================
# –î–û–î–ê–¢–ö–û–í–Ü –£–¢–ò–õ–Ü–¢–ò –î–õ–Ø –£–ü–†–ê–í–õ–Ü–ù–ù–Ø
# =============================================================================

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ utility —Å–∫—Ä–∏–ø—Ç—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
cat > azure_utils.sh << 'EOF'
#!/bin/bash
# =============================================================================
# Utility —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Azure Django —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
# =============================================================================

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –†–µ—Å—É—Ä—Å–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ)
RESOURCE_GROUP_NAME="__RESOURCE_GROUP_PLACEHOLDER__"
WEB_APP_NAME="__WEB_APP_PLACEHOLDER__"
DATABASE_SERVER_NAME="__DATABASE_SERVER_PLACEHOLDER__"
STORAGE_ACCOUNT_NAME="__STORAGE_ACCOUNT_PLACEHOLDER__"
KEY_VAULT_NAME="__KEY_VAULT_PLACEHOLDER__"

show_help() {
    echo "Azure Django Infrastructure Utils"
    echo ""
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  status      - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ñ—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤"
    echo "  logs        - –ü–æ–∫–∞–∑–∞—Ç–∏ –ª–æ–≥–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É"
    echo "  restart     - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫"
    echo "  scale       - –ú–∞—Å—à—Ç–∞–±—É–≤–∞—Ç–∏ App Service Plan"
    echo "  backup      - –°—Ç–≤–æ—Ä–∏—Ç–∏ backup –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
    echo "  costs       - –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"
    echo "  secrets     - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç–∏ Key Vault"
    echo "  firewall    - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è firewall rules"
    echo "  deploy      - –®–≤–∏–¥–∫–∏–π deploy –∑ ZIP —Ñ–∞–π–ª—É"
    echo "  cleanup     - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ cleanup —Å–∫—Ä–∏–ø—Ç"
    echo "  help        - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
    echo ""
}

show_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å Azure —Ä–µ—Å—É—Ä—Å—ñ–≤:${NC}"
    echo ""
    
    # Resource Group
    echo -n "üåç Resource Group: "
    if az group exists --name "$RESOURCE_GROUP_NAME" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ –ê–∫—Ç–∏–≤–Ω–∞${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–∞${NC}"
        return 1
    fi
    
    # Web App
    echo -n "üöÄ Web App: "
    local app_state=$(az webapp show --name "$WEB_APP_NAME" --resource-group "$RESOURCE_GROUP_NAME" --query "state" -o tsv 2>/dev/null)
    if [ "$app_state" = "Running" ]; then
        echo -e "${GREEN}‚úÖ Running${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $app_state${NC}"
    fi
    
    # Database
    echo -n "üóÑÔ∏è  Database: "
    local db_state=$(az postgres flexible-server show --name "$DATABASE_SERVER_NAME" --resource-group "$RESOURCE_GROUP_NAME" --query "state" -o tsv 2>/dev/null)
    if [ "$db_state" = "Ready" ]; then
        echo -e "${GREEN}‚úÖ Ready${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $db_state${NC}"
    fi
    
    # Storage
    echo -n "üíæ Storage: "
    local storage_status=$(az storage account show --name "$STORAGE_ACCOUNT_NAME" --resource-group "$RESOURCE_GROUP_NAME" --query "statusOfPrimary" -o tsv 2>/dev/null)
    if [ "$storage_status" = "available" ]; then
        echo -e "${GREEN}‚úÖ Available${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $storage_status${NC}"
    fi
    
    # Key Vault
    echo -n "üîê Key Vault: "
    if az keyvault show --name "$KEY_VAULT_NAME" --resource-group "$RESOURCE_GROUP_NAME" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Active${NC}"
    else
        echo -e "${RED}‚ùå Unavailable${NC}"
    fi
    
    echo ""
    echo "üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:"
    az resource list --resource-group "$RESOURCE_GROUP_NAME" --output table 2>/dev/null
}

# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —É—Ç–∏–ª—ñ—Ç...
case "$1" in
    status) show_status ;;
    logs) az webapp log tail --name "$WEB_APP_NAME" --resource-group "$RESOURCE_GROUP_NAME" ;;
    restart) az webapp restart --name "$WEB_APP_NAME" --resource-group "$RESOURCE_GROUP_NAME" ;;
    cleanup) ./cleanup_azure_infrastructure.sh ;;
    help|--help|-h) show_help ;;
    *) show_help ;;
esac
EOF

# –ó–∞–º—ñ–Ω—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ utils —Å–∫—Ä–∏–ø—Ç—ñ
sed -i "s/__RESOURCE_GROUP_PLACEHOLDER__/$RESOURCE_GROUP_NAME/g" azure_utils.sh
sed -i "s/__WEB_APP_PLACEHOLDER__/$WEB_APP_NAME/g" azure_utils.sh
sed -i "s/__DATABASE_SERVER_PLACEHOLDER__/$DATABASE_SERVER_NAME/g" azure_utils.sh
sed -i "s/__STORAGE_ACCOUNT_PLACEHOLDER__/$STORAGE_ACCOUNT_NAME/g" azure_utils.sh
sed -i "s/__KEY_VAULT_PLACEHOLDER__/$KEY_VAULT_NAME/g" azure_utils.sh

chmod +x azure_utils.sh

echo ""
echo -e "${GREEN}============================================${NC}"
echo -e "${GREEN}üõ†Ô∏è  –î–û–î–ê–¢–ö–û–í–Ü –£–¢–ò–õ–Ü–¢–ò –°–¢–í–û–†–ï–ù–Ü${NC}"
echo -e "${GREEN}============================================${NC}"
echo "üìÅ Utility —Å–∫—Ä–∏–ø—Ç: azure_utils.sh"
echo ""
echo "üîß –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
echo "  ./azure_utils.sh status    # –°—Ç–∞—Ç—É—Å —Ä–µ—Å—É—Ä—Å—ñ–≤"
echo "  ./azure_utils.sh logs      # –õ–æ–≥–∏ –¥–æ–¥–∞—Ç–∫—É"
echo "  ./azure_utils.sh restart   # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo "  ./azure_utils.sh cleanup   # –í–∏–¥–∞–ª–µ–Ω–Ω—è"
echo ""

# –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
echo ""
echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}üéâ –°–¢–í–û–†–ï–ù–ù–Ø –Ü–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ò –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
echo -e "${BLUE}============================================${NC}"
echo ""
echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ñ–∞–π–ª–∏:"
echo "  ‚úÖ requirements.txt - Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"
echo "  ‚úÖ .env.example - –ü—Ä–∏–∫–ª–∞–¥ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
echo "  ‚úÖ startup.sh - Startup —Å–∫—Ä–∏–ø—Ç –¥–ª—è Azure"
echo "  ‚úÖ web.config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Web App"
echo "  ‚úÖ infrastructure-summary.txt - –ü—ñ–¥—Å—É–º–æ–∫ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∏"
echo "  ‚úÖ cleanup_azure_infrastructure.sh - –°–∫—Ä–∏–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è"
echo "  ‚úÖ azure_utils.sh - –£—Ç–∏–ª—ñ—Ç–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"
echo ""
echo "üöÄ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:"
echo "  1. –†–æ–∑–≥–æ—Ä–Ω—ñ—Ç—å –≤–∞—à Django –∫–æ–¥: az webapp deployment source config-zip"
echo "  2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å: ./azure_utils.sh status"
echo "  3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ª–æ–≥–∏: ./azure_utils.sh logs"
echo "  4. –ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –≤–∏–¥–∞–ª—ñ—Ç—å: ./cleanup_azure_infrastructure.sh"
echo ""
echo -e "${GREEN}–£–¥–∞—á—ñ –∑ –≤–∞—à–∏–º Django –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Azure! üêç‚òÅÔ∏è${NC}"
echo ""
